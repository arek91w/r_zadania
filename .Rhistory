kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- mean( model$y[ kNaj ] )
pred[ i ] <- y_hat
}
return( pred )
}
else if (is.factor(model$y)) {
print("zadanie klasyfikacji")
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- character( nPred )
print(pred)
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- model$y[ kNaj ]
print(y_hat)
print(lenght(y_hat))
pred[i] <- i
}
return( pred )
}
}
x2
nrow(x2)
KNNpred( y2, y2$X )
KNNpred <- function( model, X ){
# sprawdzenie czy kolumny sie zgadzaja
if(ncol(model$X) != ncol(X)) {
print(ncol(model$X))
print(ncol(X))
print("rozna ilosc kolumn!")
}
for(i in names(model$X)) {
print(i)
}
for(i in names(X)) {
print(i)
}
if (is.numeric(model$y)) {
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- double( nPred )
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- mean( model$y[ kNaj ] )
pred[ i ] <- y_hat
}
return( pred )
}
else if (is.factor(model$y)) {
print("zadanie klasyfikacji")
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- character( nPred )
print(pred)
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- model$y[ kNaj ]
print(y_hat)
print(length(y_hat))
pred[i] <- i
}
return( pred )
}
}
x2
nrow(x2)
KNNpred( y2, y2$X )
KNNpred <- function( model, X ){
# sprawdzenie czy kolumny sie zgadzaja
if(ncol(model$X) != ncol(X)) {
print(ncol(model$X))
print(ncol(X))
print("rozna ilosc kolumn!")
}
for(i in names(model$X)) {
print(i)
}
for(i in names(X)) {
print(i)
}
if (is.numeric(model$y)) {
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- double( nPred )
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- mean( model$y[ kNaj ] )
pred[ i ] <- y_hat
}
return( pred )
}
else if (is.factor(model$y)) {
print("zadanie klasyfikacji")
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- character( nPred )
print(pred)
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- model$y[ kNaj ]
print(y_hat)
print(length(y_hat))
for( i in 1:length(y_hat )) {
print(y_hat[i])
}
pred[i] <- i
}
return( pred )
}
}
x2
nrow(x2)
KNNpred( y2, y2$X )
KNNpred <- function( model, X ){
# sprawdzenie czy kolumny sie zgadzaja
if(ncol(model$X) != ncol(X)) {
print(ncol(model$X))
print(ncol(X))
print("rozna ilosc kolumn!")
}
for(i in names(model$X)) {
print(i)
}
for(i in names(X)) {
print(i)
}
if (is.numeric(model$y)) {
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- double( nPred )
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- mean( model$y[ kNaj ] )
pred[ i ] <- y_hat
}
return( pred )
}
else if (is.factor(model$y)) {
print("zadanie klasyfikacji")
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- character( nPred )
print(pred)
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- model$y[ kNaj ]
print(y_hat)
print(length(y_hat))
for( i in 1:length(y_hat )) {
print(i)
print(y_hat[i])
}
pred[i] <- i
}
return( pred )
}
}
x2
nrow(x2)
KNNpred( y2, y2$X )
KNNpred <- function( model, X ){
# sprawdzenie czy kolumny sie zgadzaja
if(ncol(model$X) != ncol(X)) {
print(ncol(model$X))
print(ncol(X))
print("rozna ilosc kolumn!")
}
for(i in names(model$X)) {
print(i)
}
for(i in names(X)) {
print(i)
}
if (is.numeric(model$y)) {
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- double( nPred )
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- mean( model$y[ kNaj ] )
pred[ i ] <- y_hat
}
return( pred )
}
else if (is.factor(model$y)) {
print("zadanie klasyfikacji")
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- character( nPred )
print(pred)
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- model$y[ kNaj ]
print(y_hat)
print(length(y_hat))
for( z in 1:length(y_hat )) {
print(z)
print(y_hat[z])
}
pred[i] <- i
}
return( pred )
}
}
x2
nrow(x2)
KNNpred( y2, y2$X )
KNNpred <- function( model, X ){
# sprawdzenie czy kolumny sie zgadzaja
if(ncol(model$X) != ncol(X)) {
print(ncol(model$X))
print(ncol(X))
print("rozna ilosc kolumn!")
}
for(i in names(model$X)) {
print(i)
}
for(i in names(X)) {
print(i)
}
if (is.numeric(model$y)) {
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- double( nPred )
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- mean( model$y[ kNaj ] )
pred[ i ] <- y_hat
}
return( pred )
}
else if (is.factor(model$y)) {
print("zadanie klasyfikacji")
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- character( nPred )
print(pred)
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- model$y[ kNaj ]
print(y_hat)
print(length(y_hat))
for( z in 1:length(y_hat )) {
print(z)
print(y_hat[z])
}
pred[i] <- as.character(y_hat[0])
}
return( pred )
}
}
x2
nrow(x2)
KNNpred( y2, y2$X )
KNNpred <- function( model, X ){
# sprawdzenie czy kolumny sie zgadzaja
if(ncol(model$X) != ncol(X)) {
print(ncol(model$X))
print(ncol(X))
print("rozna ilosc kolumn!")
}
for(i in names(model$X)) {
print(i)
}
for(i in names(X)) {
print(i)
}
if (is.numeric(model$y)) {
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- double( nPred )
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- mean( model$y[ kNaj ] )
pred[ i ] <- y_hat
}
return( pred )
}
else if (is.factor(model$y)) {
print("zadanie klasyfikacji")
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- character( nPred )
print(pred)
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- model$y[ kNaj ]
print(y_hat)
print(length(y_hat))
for( z in 1:length(y_hat )) {
print(z)
print(y_hat[z])
}
pred[i] <- as.character(y_hat)
}
return( pred )
}
}
x2
nrow(x2)
KNNpred( y2, y2$X )
KNNpred <- function( model, X ){
# sprawdzenie czy kolumny sie zgadzaja
if(ncol(model$X) != ncol(X)) {
print(ncol(model$X))
print(ncol(X))
print("rozna ilosc kolumn!")
}
for(i in names(model$X)) {
print(i)
}
for(i in names(X)) {
print(i)
}
if (is.numeric(model$y)) {
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- double( nPred )
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- mean( model$y[ kNaj ] )
pred[ i ] <- y_hat
}
return( pred )
}
else if (is.factor(model$y)) {
print("zadanie klasyfikacji")
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- character( nPred )
print(pred)
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- model$y[ kNaj ]
print(y_hat)
print(length(y_hat))
for( z in 1:length(y_hat )) {
print(y_hat[z])
}
pred[i] <- as.character(y_hat[1])
}
return( pred )
}
}
x2
nrow(x2)
KNNpred( y2, y2$X )
KNNpred <- function( model, X ){
# sprawdzenie czy kolumny sie zgadzaja
if(ncol(model$X) != ncol(X)) {
print(ncol(model$X))
print(ncol(X))
print("rozna ilosc kolumn!")
}
for(i in names(model$X)) {
print(i)
}
for(i in names(X)) {
print(i)
}
if (is.numeric(model$y)) {
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- double( nPred )
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- mean( model$y[ kNaj ] )
pred[ i ] <- y_hat
}
return( pred )
}
else if (is.factor(model$y)) {
print("zadanie klasyfikacji")
nTrain <- nrow( model$X )
nPred <- nrow( X )
odl <- matrix( 0, nTrain, nPred )
for( i in 1:nTrain ){
for( j in 1:nPred ){
odl[i,j] <- d_euklides( model$X[i,], X[j,] )
}
}
pred <- character( nPred )
print(pred)
for( i in 1:nPred ){
kNaj <- order( odl[,i] )
kNaj <- kNaj[1:model$k]
y_hat <- model$y[ kNaj ]
for( z in 1:length(y_hat )) {
print(y_hat[z])
}
pred[i] <- as.character(y_hat[1])
}
return( pred )
}
}
x2
nrow(x2)
KNNpred( y2, y2$X )
